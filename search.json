[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Karl Forner. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Forner K (2024). RcppProgress: Interruptible Progress Bar OpenMP Support C++ R Packages. R package version 0.4.2, https://github.com/kforner/rcpp_progress.","code":"@Manual{,   title = {RcppProgress: An Interruptible Progress Bar with OpenMP Support for C++ in R Packages},   author = {Karl Forner},   year = {2024},   note = {R package version 0.4.2},   url = {https://github.com/kforner/rcpp_progress}, }"},{"path":"/index.html","id":"rcppprogress","dir":"","previous_headings":"","what":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"R package provides c++ interruptible progress bar OpenMP support c++ code R packages: check user interrupts c++ code display progress bar monitoring c++ computation compatible multi-threaded c++ code (e.g. openMP)","code":""},{"path":"/index.html","id":"installing","dir":"","previous_headings":"","what":"Installing","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"CRAN: install.packages(\"RcppProgress\") github: remotes::install_github('kforner/rcpp_progress')","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"example","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"see detailed example Rcpp Gallery: http://gallery.rcpp.org/articles/using-rcppprogress/","code":""},{"path":"/index.html","id":"how-to-build","dir":"","previous_headings":"","what":"How to build","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"Prerequisites: OpenMP support use multithreaded parallelized version. OpenMP available GCC >= 4.2 Just install usual way. want control, unarchive , cd source directory, type R CMD INSTALL . console.","code":""},{"path":"/index.html","id":"feedback","dir":"","previous_headings":"","what":"Feedback","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"Please use github issues provide feedback, report bugs propose new features.","code":""},{"path":"/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"Contributions welcome! proposed process : open issue propose changes fork project merge request code review merge master New code must tested documented, also come example.","code":""},{"path":[]},{"path":"/index.html","id":"tests-and-check","dir":"","previous_headings":"For developers","what":"tests and check","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"RcppProgress dependencies (suggests) installed: type: - make tests: run tests - make check: check package","code":""},{"path":"/index.html","id":"docker-checker","dir":"","previous_headings":"For developers","what":"docker-checker","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"Dockerfile () provided help building dev environment (built rocker/r-devel) develop test RcppProgress. type: make docker/build: build docker make docker/run: run shell docker current dir mounted inside make docker/check: check package inside docker make docker/tests: run test tests package inside docker","code":""},{"path":"/index.html","id":"test-on-windows-using-rhub","dir":"","previous_headings":"For developers","what":"test on windows using rhub","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"","code":"make docker/run make check_rhub_windows"},{"path":"/reference/RcppProgress-package.html","id":null,"dir":"Reference","previous_headings":"","what":"An interruptible progress bar with OpenMP support for c++ in R packages — RcppProgress-package","title":"An interruptible progress bar with OpenMP support for c++ in R packages — RcppProgress-package","text":"package allows display progress bar R     console long running computations taking place c++ code,     provides support interrupting computations even multithreaded code.","code":""},{"path":"/reference/RcppProgress-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An interruptible progress bar with OpenMP support for c++ in R packages — RcppProgress-package","text":"implementing CPU intensive computations C++ R packages, natural want monitor progress computations, able interrupt , even using multithreading example OpenMP. Another feature can done code still work even without OpenMP support. package offers facilities help implementing features. biased towards use OpenMP, compatible using multithreading ways.","code":""},{"path":"/reference/RcppProgress-package.html","id":"quick-try","dir":"Reference","previous_headings":"","what":"quick try","title":"An interruptible progress bar with OpenMP support for c++ in R packages — RcppProgress-package","text":"two tests functions provided package get quick overview   can done. tests : test_sequential(max, nb, display_progress) - sequential code, .e. single threaded test_multithreaded(max, nb, threads, display_progress) - multithreaded code using OpenMP wrappers examples implemented RcppProgressExample package located examples directory RcppProgress installed package. tests call function implements long computation. max parameter controls number computations, nb controls duration single computation, quadratic nb. threads expected number threads use computation. progress parameter toggles display progress bar. platform, good start.","code":"system.time( test_multithreaded(100, 3000, 4) )"},{"path":"/reference/RcppProgress-package.html","id":"c-usage","dir":"Reference","previous_headings":"","what":"c++ usage","title":"An interruptible progress bar with OpenMP support for c++ in R packages — RcppProgress-package","text":"usually two locations c++ code needs modified. first one main loop, typically number jobs tasks. loop good candidate parallelized using OpenMP. comment code corresponding tests included package. create Progress object number tasks perform, performing task test abortion (p.is_aborted()), can exit OpenMP loop usual way, suing break example, computation, increment progress monitor. let us look computation function (completely useless) : interesting line  Progress::check_abort() call. called master thread, check user interruption, needed set abort status code. called another thread just check status. art decide put call: called often frequently enough. rule thumb called roughly evevry second.","code":"void test_multithreaded_omp(int max, int nb, int threads                               , bool display\\_progress) {  \\#ifdef _OPENMP     if ( threads > 0 )         omp_set_num_threads( threads );     REprintf(\\\"Number of threads=%i\\n\\\", omp_get_max_threads()); \\#endif      Progress p(max, display_progress); // create the progress monitor #pragma omp parallel for schedule(dynamic)     for (int i = 0; i < max; ++i) {         if ( ! p.is_aborted() ) { // the only way to exit an OpenMP loop             long_computation(nb);             p.increment(); // update the progress         }     } } double long_computation(int nb) {     double sum = 0;     for (int i = 0; i < nb; ++i) {       if ( Progress::check_abort() ) // check for user abort         return -1;       for (int j = 0; j < nb; ++j) {         sum += Rf_dlnorm(i+j, 0.0, 1.0, 0);       }     }   }   return sum; }"},{"path":"/reference/RcppProgress-package.html","id":"using-rcppprogress-in-your-package","dir":"Reference","previous_headings":"","what":"Using RcppProgress in your package","title":"An interruptible progress bar with OpenMP support for c++ in R packages — RcppProgress-package","text":"Please note provide RcppProgressExample example package along package, \tlocated examples directory installed package. steps use RcppProgress new package: skeleton create package skeleton using Rcpp DESCRIPTION edit DESCRIPTION file  add RcppProgress Depends: LinkingTo: lines. e.g.  MakeVars edit src/MakeVars replace content PKG_LIBS = `$(R_HOME)/bin/Rscript -e \"Rcpp:::LdFlags()\"` $(SHLIB_OPENMP_CXXFLAGS) PKG_CXXFLAGS +=-Ilibsrc $(SHLIB_OPENMP_CXXFLAGS) c++ code Put code src. may instance copy RcppProgressExample/src/tests.cpp file src,  RcppProgressExample/R/tests.R R, try compile package (R CMD INSTALL -l test .) execute tests:","code":"library(Rcpp) Rcpp.package.skeleton(\"RcppProgressExample\") Depends: Rcpp (>= 0.9.4), RcppProgress (>= 0.1) LinkingTo: Rcpp, RcppProgress >library(RcppProgressExample, lib.loc=\"test\") >RcppProgressExample::test_multithreaded(100, 600, 4)"},{"path":"/reference/RcppProgress-package.html","id":"using-rcppprogress-with-rcpparmadillo","dir":"Reference","previous_headings":"","what":"Using RcppProgress with RcppArmadillo","title":"An interruptible progress bar with OpenMP support for c++ in R packages — RcppProgress-package","text":"also provide RcppProgressArmadillo example package along package, located examples directory installed package. peculiarity include RcppArmadillo.h header progress.hpp RcppProgress header, add RcppArmadillo LinkingTo: field package DESCRIPTION file.","code":""},{"path":[]},{"path":"/reference/RcppProgress-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An interruptible progress bar with OpenMP support for c++ in R packages — RcppProgress-package","text":"Karl Forner Maintainer: Karl Forner <karl.forner@quartzbio.com>","code":""},{"path":"/reference/RcppProgress-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An interruptible progress bar with OpenMP support for c++ in R packages — RcppProgress-package","text":"","code":"# these are implemented as examples inside RcppProgress provided   # example package: examples/RcppProgressExample   # check the source code    # the underlying test_test_multithreaded c++ function is multithreaded   # , has a progress bar and is still interruptible   if (FALSE) {     test_multithreaded(nb = 300, threads = 4)   }"},{"path":"/reference/test_amardillo_multithreaded.html","id":null,"dir":"Reference","previous_headings":"","what":"runs the multithreaded test from the RcppProgressArmadillo example package — test_amardillo_multithreaded","title":"runs the multithreaded test from the RcppProgressArmadillo example package — test_amardillo_multithreaded","text":"runs multithreaded test RcppProgressArmadillo example package","code":""},{"path":"/reference/test_amardillo_multithreaded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runs the multithreaded test from the RcppProgressArmadillo example package — test_amardillo_multithreaded","text":"","code":"test_amardillo_multithreaded(   max = 100,   nb = 1000,   threads = 0,   display_progress = TRUE )"},{"path":"/reference/test_amardillo_multithreaded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runs the multithreaded test from the RcppProgressArmadillo example package — test_amardillo_multithreaded","text":"max number loops/increments execute nb parameter controlling number computations executed loop threads number OMP threads use. < 0, runs sequential mode. display_progress whether display progress bar","code":""},{"path":"/reference/test_amardillo_multithreaded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runs the multithreaded test from the RcppProgressArmadillo example package — test_amardillo_multithreaded","text":"computed number, -1 computation aborted","code":""},{"path":"/reference/test_eta_progress_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"runs the test from the RcppProgressETA example package — test_eta_progress_bar","title":"runs the test from the RcppProgressETA example package — test_eta_progress_bar","text":"runs test RcppProgressETA example package","code":""},{"path":"/reference/test_eta_progress_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runs the test from the RcppProgressETA example package — test_eta_progress_bar","text":"","code":"test_eta_progress_bar(max = 100, nb = 1000, display_progress = TRUE)"},{"path":"/reference/test_eta_progress_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runs the test from the RcppProgressETA example package — test_eta_progress_bar","text":"max number loops/increments execute nb parameter controlling number computations executed loop display_progress whether display progress bar","code":""},{"path":"/reference/test_eta_progress_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runs the test from the RcppProgressETA example package — test_eta_progress_bar","text":"computed number, -1 computation aborted","code":""},{"path":"/reference/test_multithreaded.html","id":null,"dir":"Reference","previous_headings":"","what":"runs the multithreaded test from the RcppProgressExample example R package — test_multithreaded","title":"runs the multithreaded test from the RcppProgressExample example R package — test_multithreaded","text":"runs multithreaded test RcppProgressExample example R package","code":""},{"path":"/reference/test_multithreaded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runs the multithreaded test from the RcppProgressExample example R package — test_multithreaded","text":"","code":"test_multithreaded(max = 100, nb = 1000, threads = 0, display_progress = TRUE)"},{"path":"/reference/test_multithreaded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runs the multithreaded test from the RcppProgressExample example R package — test_multithreaded","text":"max number loops/increments execute nb parameter controlling number computations executed loop threads number OMP threads use. < 0, runs sequential mode. display_progress whether display progress bar","code":""},{"path":"/reference/test_multithreaded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runs the multithreaded test from the RcppProgressExample example R package — test_multithreaded","text":"computed number, -1 computation aborted","code":""},{"path":"/reference/test_sequential.html","id":null,"dir":"Reference","previous_headings":"","what":"runs the sequential test from the RcppProgressExample example R package — test_sequential","title":"runs the sequential test from the RcppProgressExample example R package — test_sequential","text":"runs sequential test RcppProgressExample example R package","code":""},{"path":"/reference/test_sequential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runs the sequential test from the RcppProgressExample example R package — test_sequential","text":"","code":"test_sequential(max = 100, nb = 1000, display_progress = TRUE)"},{"path":"/reference/test_sequential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runs the sequential test from the RcppProgressExample example R package — test_sequential","text":"max number loops/increments execute nb parameter controlling number computations executed loop display_progress whether display progress bar","code":""},{"path":"/reference/test_sequential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runs the sequential test from the RcppProgressExample example R package — test_sequential","text":"computed number, -1 computation aborted","code":""},{"path":"/news/index.html","id":"rcppprogress-042","dir":"Changelog","previous_headings":"","what":"RcppProgress 0.4.2","title":"RcppProgress 0.4.2","text":"CRAN release: 2020-02-06 constructor now clears existing Progress instance. fixes problems recent versions R seem able sometimes intercept interrupt R level, cf https://github.com/kforner/rcpp_progress/issues/4","code":""},{"path":"/news/index.html","id":"rcppprogress-04","dir":"Changelog","previous_headings":"","what":"RcppProgress 0.4","title":"RcppProgress 0.4","text":"CRAN release: 2017-11-21 RccpProgress now can use custom Progress Bars (draft Clemens Schmid @nevrome) include example package RcppProgressETA, included RcppProgress example using custom progress bar, also contains implementation (Clemens Schmid @nevrome) vertical progress bar displays ETA (Estimated Time completion). reorganized example tests functions: longer implemented inside RcppProgress code, called embedded RcppProgressExample example package. result RcppProgress longer provides dynamic library, need link Rcpp. example tests also now available testthat tests, thus used package check. cleaned Dockerfile improved docker-related Makefile targets refactored Makefile","code":""},{"path":"/news/index.html","id":"rcppprogress-03","dir":"Changelog","previous_headings":"","what":"RcppProgress 0.3","title":"RcppProgress 0.3","text":"CRAN release: 2017-01-05 fixed issue #3: Rcpp namespace longer open fixed issue #2 extra progress bar symbols printed refactored code putting display code class ProgressBar fixed armadillo example warning.","code":""},{"path":"/news/index.html","id":"rcppprogress-02","dir":"Changelog","previous_headings":"","what":"RcppProgress 0.2","title":"RcppProgress 0.2","text":"CRAN release: 2015-01-07 improvement Jacques-Henri Jourdan make possible use progress monitor multiple cpp files. fixed compatibility problems RcppArmadillo header. provided new example using RcppArmadillo used Rf_error instead error implementation add note doc RcppArmadillo added file","code":""}]
