[{"path":"/articles/01_using_rcpp_progress.html","id":"checking-for-user-interrupts","dir":"Articles","previous_headings":"","what":"Checking for user interrupts","title":"Using RcppProgress","text":"Let’s modify code add check user interruption calling function Progress::check_abort(). Note Rcpp::depends(RcppProgress) attribute header part takes care include path progress.hpp header. Now long_computation_interruptible() call interruptible (e.g. typing CTRL+C classic R console). may wonder put check_abort() call first loop instead second. performance cost call negligible. put place called often enough (like per second) yet often minimize overhead.","code":"// [[Rcpp::depends(RcppProgress)]] #include <progress.hpp> // [[Rcpp::export]] double long_computation_interruptible(int nb) {     double sum = 0;     for (int i = 0; i < nb; ++i) {         if (Progress::check_abort() )             return -1.0;     for (int j = 0; j < nb; ++j) {         sum += R::dlnorm(i+j, 0.0, 1.0, 0);     }     }     return sum + nb; } system.time(res  <- long_computation_interruptible(3000)) # interrupt me ##    user  system elapsed  ##       0       0       0 print(res) ## [1] -1"},{"path":"/articles/01_using_rcpp_progress.html","id":"adding-a-progress-bar","dir":"Articles","previous_headings":"","what":"Adding a progress bar","title":"Using RcppProgress","text":"Time add progress bar. Progress::increment() function quite fast, can put second loop. real life example, sufficient put place called least every second.","code":"// [[Rcpp::depends(RcppProgress)]] #include <progress.hpp> #include <progress_bar.hpp> // [[Rcpp::export]] double long_computation_progress(int nb, bool display_progress=true) {     double sum = 0;     Progress p(nb*nb, display_progress);     for (int i = 0; i < nb; ++i) {         if (Progress::check_abort() )             return -1.0;         for (int j = 0; j < nb; ++j) {             p.increment(); // update progress         sum += R::dlnorm(i+j, 0.0, 1.0, 0);     }     }     return sum + nb; } system.time(res  <- long_computation_progress(3000)) # interrupt me ##    user  system elapsed  ##       0       0       0 print(res) ## [1] -1"},{"path":"/articles/01_using_rcpp_progress.html","id":"openmp-support","dir":"Articles","previous_headings":"","what":"OpenMP support","title":"Using RcppProgress","text":"First need enable OpenMP support gcc. early days used recent version Rcpp plugin us. OpenMP version function: Now check parallelized. execution time first call uses 4 threads much faster (~ 3 times faster computer) call one single thread:","code":"Sys.setenv(\"PKG_CXXFLAGS\"=\"-fopenmp\") Sys.setenv(\"PKG_LIBS\"=\"-fopenmp\") #ifdef _OPENMP #include <omp.h> #endif // [[Rcpp::plugins(openmp)]] // [[Rcpp::depends(RcppProgress)]] #include <progress.hpp> // [[Rcpp::export]] double long_computation_omp(int nb, int threads=1) { #ifdef _OPENMP     if ( threads > 0 )         omp_set_num_threads( threads );     REprintf(\"Number of threads=%i\\n\", omp_get_max_threads()); #endif       double sum = 0; #pragma omp parallel for schedule(dynamic)        for (int i = 0; i < nb; ++i) {         double thread_sum = 0;     for (int j = 0; j < nb; ++j) {         thread_sum += R::dlnorm(i+j, 0.0, 1.0, 0);     }         sum += thread_sum;     }     return sum + nb; } system.time(res4 <- long_computation_omp(5000, 4)) ##    user  system elapsed  ##   0.770   0.000   0.194 print(res4) ## [1] 5002.32 system.time(res1 <- long_computation_omp(5000, 1)) ##    user  system elapsed  ##   0.533   0.000   0.533 print(res1) ## [1] 5002.32"},{"path":"/articles/01_using_rcpp_progress.html","id":"adding-progress-monitoring-to-the-openmp-function","dir":"Articles","previous_headings":"","what":"adding progress monitoring to the openMP function","title":"Using RcppProgress","text":"","code":"#ifdef _OPENMP #include <omp.h> #endif // [[Rcpp::plugins(openmp)]] // [[Rcpp::depends(RcppProgress)]] #include <progress.hpp> #include <progress_bar.hpp> // [[Rcpp::export]] double long_computation_omp_progress(const int nb, int threads=1) { #ifdef _OPENMP     if ( threads > 0 )         omp_set_num_threads( threads ); #endif     Progress p(nb, true);     double sum = 0; #pragma omp parallel for default(none) reduction(+ : sum) schedule(dynamic)     for (int i = 0; i < nb; ++i) {         double thread_sum = 0;         if ( ! Progress::check_abort() ) {             p.increment(); // update progress             for (int j = 0; j < nb; ++j) {                 thread_sum += R::dlnorm(i+j, 0.0, 1.0, 0);             }         }         sum += thread_sum;     }     return sum + nb; } system.time(long_computation_omp_progress(5000, 4))"},{"path":"/articles/01_using_rcpp_progress.html","id":"test-it-now","dir":"Articles","previous_headings":"","what":"Test it now","title":"Using RcppProgress","text":"want test now R console, just paste following code (installing RcppProgress course): run","code":"CODE <- r\"( #ifdef _OPENMP #include <omp.h> #endif // [[Rcpp::plugins(openmp)]] // [[Rcpp::depends(RcppProgress)]] #include <progress.hpp> #include <progress_bar.hpp>  // [[Rcpp::export]] double long_computation_omp_progress(int nb, int threads=1) { #ifdef _OPENMP     if ( threads > 0 )         omp_set_num_threads( threads ); #endif     Progress p(nb, true);     double sum = 0; #pragma omp parallel for schedule(dynamic)        for (int i = 0; i < nb; ++i) {         double thread_sum = 0;         if ( ! Progress::check_abort() ) {             p.increment(); // update progress             for (int j = 0; j < nb; ++j) {                 thread_sum += R::dlnorm(i+j, 0.0, 1.0, 0);             }         }         sum += thread_sum;     }        return sum + nb; } )\" Rcpp::sourceCpp(code = CODE) res <- long_computation_omp_progress(10000, 4)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Karl Forner. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Forner K (2024). RcppProgress: Interruptible Progress Bar OpenMP Support C++ R Packages. R package version 1.0.0, https://github.com/kforner/rcpp_progress.","code":"@Manual{,   title = {RcppProgress: An Interruptible Progress Bar with OpenMP Support for C++ in R Packages},   author = {Karl Forner},   year = {2024},   note = {R package version 1.0.0},   url = {https://github.com/kforner/rcpp_progress}, }"},{"path":[]},{"path":"/dev.html","id":"how-to-build","dir":"","previous_headings":"","what":"How to build","title":"For developers","text":"Prerequisites: OpenMP support use multithreaded parallelized version. OpenMP available GCC >= 4.2 Just install usual way. want control, unarchive , cd source directory, type R CMD INSTALL . console.","code":""},{"path":"/dev.html","id":"feedback","dir":"","previous_headings":"","what":"Feedback","title":"For developers","text":"Please use github issues provide feedback, report bugs propose new features.","code":""},{"path":"/dev.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"For developers","text":"Contributions welcome! proposed process : open issue propose changes fork project merge request code review merge master New code must tested documented, also come example.","code":""},{"path":[]},{"path":"/dev.html","id":"vs-code-devcontainer","dir":"","previous_headings":"","what":"VS Code devcontainer","title":"For developers","text":"repository devcontainer configured. open vscode, prompt reopen container. need install anything, can directly run make tests/check/… can also run project inside github codespaces, use devcontainer.","code":""},{"path":"/dev.html","id":"tests-and-check","dir":"","previous_headings":"VS Code devcontainer","what":"tests and check","title":"For developers","text":"RcppProgress dependencies (suggests) installed: type: - make tests: run tests - make check: check package","code":""},{"path":"/dev.html","id":"docker-checker","dir":"","previous_headings":"VS Code devcontainer","what":"docker-checker","title":"For developers","text":"N.B: somewhat deprecated vscode devcontainer (see ). Dockerfile () provided help building dev environment (built rocker/r-devel) develop test RcppProgress. type: make docker/build: build docker make docker/run: run shell docker current dir mounted inside make docker/check: check package inside docker make docker/tests: run test tests package inside docker","code":""},{"path":"/dev.html","id":"test-on-windows-using-rhub","dir":"","previous_headings":"VS Code devcontainer","what":"test on windows using rhub","title":"For developers","text":"","code":"make docker/run make check_rhub_windows"},{"path":"/index.html","id":"rcppprogress","dir":"","previous_headings":"","what":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"R package provides C++ interruptible progress bar OpenMP support C++ code R packages: can check user interrupts C++ code can display progress bar monitoring C++ computation compatible multi-threaded C++ code (e.g. openMP)","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"Usually write C++ code R want speedup calculations. Depending parameters, especially development, difficult anticipate execution time computation, know wait one minute several hours. RcppProgress tool help monitor execution time C++ code, providing way interrupt execution inside C++ code, also display progress bar indicative state computation. Additionally, compatible multithreaded code, example using OpenMP, trivial may seem since just stop execution one thread. Also, threads writing console avoid garbled output.","code":""},{"path":"/index.html","id":"installing","dir":"","previous_headings":"","what":"Installing","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"CRAN: install.packages(\"RcppProgress\") github: remotes::install_github('kforner/rcpp_progress')","code":""},{"path":"/index.html","id":"quick-try","dir":"","previous_headings":"","what":"Quick try","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"test functions included RcppProgress convenience, let run R functions calling C++ code, interruptible (typing CTRL+c) displaying progress bar: test_multithreaded() test_amardillo_multithreaded() test_eta_progress_bar() functions use example R packages included RcppProgress package (check inst/examples github repository). example:","code":">RcppProgress::test_multithreaded() Number of threads=4 0%   10   20   30   40   50   60   70   80   90   100% [----|----|----|----|----|----|----|----|----|----| **************************************************|"},{"path":"/index.html","id":"inline-demo","dir":"","previous_headings":"","what":"Inline demo","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"can also test complete example entirely R console!","code":"# our C++ code CODE <- r\"( #ifdef _OPENMP #include <omp.h> #endif // [[Rcpp::plugins(openmp)]] // [[Rcpp::depends(RcppProgress)]] #include <progress.hpp> #include <progress_bar.hpp>  // [[Rcpp::export]] double long_computation_omp_progress(int nb, int threads=1) { #ifdef _OPENMP     if ( threads > 0 )         omp_set_num_threads( threads ); #endif     Progress p(nb, true);     double sum = 0; #pragma omp parallel for schedule(dynamic)        for (int i = 0; i < nb; ++i) {         double thread_sum = 0;         if ( ! Progress::check_abort() ) {             p.increment(); // update progress             for (int j = 0; j < nb; ++j) {                 thread_sum += R::dlnorm(i+j, 0.0, 1.0, 0);             }         }         sum += thread_sum;     }        return sum + nb; } )\"  # compile and run it Rcpp::sourceCpp(code = CODE) res <- long_computation_omp_progress(10000, 4)"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"example","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"detailed example Rcpp Gallery: http://gallery.rcpp.org/articles/using-rcppprogress/. improved now available vignette TODO: insert link","code":""},{"path":"/index.html","id":"feedback","dir":"","previous_headings":"","what":"Feedback","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"Please use github issues provide feedback, report bugs propose new features.","code":""},{"path":"/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"An Interruptible Progress Bar with OpenMP Support for C++ in R Packages","text":"cf ","code":""},{"path":"/reference/test_amardillo_multithreaded.html","id":null,"dir":"Reference","previous_headings":"","what":"runs the multithreaded test from the RcppProgressArmadillo example package — test_amardillo_multithreaded","title":"runs the multithreaded test from the RcppProgressArmadillo example package — test_amardillo_multithreaded","text":"runs multithreaded test RcppProgressArmadillo example package","code":""},{"path":"/reference/test_amardillo_multithreaded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runs the multithreaded test from the RcppProgressArmadillo example package — test_amardillo_multithreaded","text":"","code":"test_amardillo_multithreaded(   max = 100,   nb = 1000,   threads = 0,   display_progress = TRUE )"},{"path":"/reference/test_amardillo_multithreaded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runs the multithreaded test from the RcppProgressArmadillo example package — test_amardillo_multithreaded","text":"max number loops/increments execute nb parameter controlling number computations executed loop, time  complexity quadratic parameter threads number OMP threads use computation. < 0, runs sequential mode. display_progress whether display progress bar","code":""},{"path":"/reference/test_amardillo_multithreaded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runs the multithreaded test from the RcppProgressArmadillo example package — test_amardillo_multithreaded","text":"computed number, -1 computation aborted","code":""},{"path":"/reference/test_eta_progress_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"runs the test from the RcppProgressETA example package — test_eta_progress_bar","title":"runs the test from the RcppProgressETA example package — test_eta_progress_bar","text":"runs test RcppProgressETA example package","code":""},{"path":"/reference/test_eta_progress_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runs the test from the RcppProgressETA example package — test_eta_progress_bar","text":"","code":"test_eta_progress_bar(max = 100, nb = 1000, display_progress = TRUE)"},{"path":"/reference/test_eta_progress_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runs the test from the RcppProgressETA example package — test_eta_progress_bar","text":"max number loops/increments execute nb parameter controlling number computations executed loop, time  complexity quadratic parameter display_progress whether display progress bar","code":""},{"path":"/reference/test_eta_progress_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runs the test from the RcppProgressETA example package — test_eta_progress_bar","text":"computed number, -1 computation aborted","code":""},{"path":"/reference/test_multithreaded.html","id":null,"dir":"Reference","previous_headings":"","what":"runs the multithreaded test from the RcppProgressExample example R package — test_multithreaded","title":"runs the multithreaded test from the RcppProgressExample example R package — test_multithreaded","text":"runs multithreaded test RcppProgressExample example R package","code":""},{"path":"/reference/test_multithreaded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runs the multithreaded test from the RcppProgressExample example R package — test_multithreaded","text":"","code":"test_multithreaded(max = 100, nb = 1000, threads = 0, display_progress = TRUE)"},{"path":"/reference/test_multithreaded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runs the multithreaded test from the RcppProgressExample example R package — test_multithreaded","text":"max number loops/increments execute nb parameter controlling number computations executed loop, time  complexity quadratic parameter threads number OMP threads use computation. < 0, runs sequential mode. display_progress whether display progress bar","code":""},{"path":"/reference/test_multithreaded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runs the multithreaded test from the RcppProgressExample example R package — test_multithreaded","text":"computed number, -1 computation aborted","code":""},{"path":"/reference/test_sequential.html","id":null,"dir":"Reference","previous_headings":"","what":"runs the sequential test from the RcppProgressExample example R package — test_sequential","title":"runs the sequential test from the RcppProgressExample example R package — test_sequential","text":"runs sequential test RcppProgressExample example R package","code":""},{"path":"/reference/test_sequential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runs the sequential test from the RcppProgressExample example R package — test_sequential","text":"","code":"test_sequential(max = 100, nb = 1000, display_progress = TRUE)"},{"path":"/reference/test_sequential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runs the sequential test from the RcppProgressExample example R package — test_sequential","text":"max number loops/increments execute nb parameter controlling number computations executed loop, time  complexity quadratic parameter display_progress whether display progress bar","code":""},{"path":"/reference/test_sequential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runs the sequential test from the RcppProgressExample example R package — test_sequential","text":"computed number, -1 computation aborted","code":""},{"path":"/news/index.html","id":"rcppprogress-100","dir":"Changelog","previous_headings":"","what":"RcppProgress 1.0.0","title":"RcppProgress 1.0.0","text":"fixed issue #38: Progress::check_abort() crashes Progress instance created added back exported test functions, allowing easily test included example packages (cf http://kforner.github.io/rcpp_progress/reference/test_multithreaded.html instance) now using vscode devcontainer using pkgdown deploying doc http://kforner.github.io/rcpp_progress/ configured test coverage reporting using *codecov** now using roxygen2 added CI github actions test package multiple architectures OSes (except Macos now), report test coverage deploy documentation refreshed documentation, README, added vignette RcppGallery, added short vignette RcppArmadillo","code":""},{"path":"/news/index.html","id":"rcppprogress-042","dir":"Changelog","previous_headings":"","what":"RcppProgress 0.4.2","title":"RcppProgress 0.4.2","text":"CRAN release: 2020-02-06 constructor now clears existing Progress instance. fixes problems recent versions R seem able sometimes intercept interrupt R level, cf https://github.com/kforner/rcpp_progress/issues/4","code":""},{"path":"/news/index.html","id":"rcppprogress-04","dir":"Changelog","previous_headings":"","what":"RcppProgress 0.4","title":"RcppProgress 0.4","text":"CRAN release: 2017-11-21 RccpProgress now can use custom Progress Bars (draft Clemens Schmid @nevrome) include example package RcppProgressETA, included RcppProgress example using custom progress bar, also contains implementation (Clemens Schmid @nevrome) vertical progress bar displays ETA (Estimated Time completion). reorganized example tests functions: longer implemented inside RcppProgress code, called embedded RcppProgressExample example package. result RcppProgress longer provides dynamic library, need link Rcpp. example tests also now available testthat tests, thus used package check. cleaned Dockerfile improved docker-related Makefile targets refactored Makefile","code":""},{"path":"/news/index.html","id":"rcppprogress-03","dir":"Changelog","previous_headings":"","what":"RcppProgress 0.3","title":"RcppProgress 0.3","text":"CRAN release: 2017-01-05 fixed issue #3: Rcpp namespace longer open fixed issue #2 extra progress bar symbols printed refactored code putting display code class ProgressBar fixed armadillo example warning.","code":""},{"path":"/news/index.html","id":"rcppprogress-02","dir":"Changelog","previous_headings":"","what":"RcppProgress 0.2","title":"RcppProgress 0.2","text":"CRAN release: 2015-01-07 improvement Jacques-Henri Jourdan make possible use progress monitor multiple cpp files. fixed compatibility problems RcppArmadillo header. provided new example using RcppArmadillo used Rf_error instead error implementation add note doc RcppArmadillo added file","code":""}]
